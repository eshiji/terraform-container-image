name: Create Tag and Release

on:
  push:
    # Trigger this github action when pushed directly to the master or main branches
    branches: ["master", "main", "feature/*"]

permissions:
  contents: write

jobs:
  create_tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Read version file
        id: get_version
        run: |
          cat version
          echo "version=$(cat version)" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          if git show-ref --tags --verify --quiet "refs/tags/${{ steps.get_version.outputs.version }}"; then
            echo "tag_exists=true"
          else
            echo "tag_exists=false"
          fi
          echo "tag_exists=$tag_exists" >> $GITHUB_OUTPUT

      - name: Create tag
        uses: actions/github-script@v7
        if: steps.check_tag.outputs.tag_exists == false
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.get_version.outputs.version }}',
              sha: context.sha
            })

  create_release:
    runs-on: ubuntu-latest
    needs: [ create_tag ]
    steps:
      - name: Check if release exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        run: |
          if [[ "$(gh release view ${{ needs.create_tag.outputs.version }} 2>&1)" == "release not found" ]]; then
            echo "Release not found."
            echo "release_exists=false"
          else
            echo "Release found."
            echo "release_exists=true"
          fi
          echo "release_exists=$release_exists" >> $GITHUB_OUTPUT

      - name: Create release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        if: steps.check_release.outputs.release_exists == false
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases \
            -f "name=${{ needs.create_tag.outputs.version }}" \
            -f "tag_name=${{ needs.create_tag.outputs.version }}" \
            -f "target_commitish=main" \
            -F "draft=false" \
            -F "generate_release_notes=true" \
            -F "prerelease=${{ contains(github.ref_name, 'feature') }}" \
            -F "make_latest='${{ contains(github.ref_name, 'main') }}'"

      - name: Update release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        if: steps.check_release.outputs.release_exists == true
        run: |
          RELEASE_ID=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases/tags/${{ needs.create_tag.outputs.version }} \
            --jq '.id')
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases/$RELEASE_ID \
            -f "name=${{ needs.create_tag.outputs.version }}" \
            -f "tag_name=${{ needs.create_tag.outputs.version }}" \
            -f "target_commitish=main" \
            -F "draft=false" \
            -F "generate_release_notes=true" \
            -F "prerelease=${{ contains(github.ref_name, 'feature') }}" \
            -F "make_latest='${{ contains(github.ref_name, 'main') }}'"
